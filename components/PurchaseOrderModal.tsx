import { X, Printer, Send, Package } from 'lucide-react';
import { Material } from '../types';
import { formatCurrency } from '../utils';
import { measurementUtils } from '../utils';

interface PurchaseOrderModalProps {
  material: Material;
  onClose: () => void;
}

export function PurchaseOrderModal({ material, onClose }: PurchaseOrderModalProps) {
  const generatePurchaseOrder = () => {
    const poContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>Purchase Order - ${material.name}</title>
          <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
            body {
              font-family: 'Inter', sans-serif;
              margin: 0;
              padding: 20px;
              background: white;
              color: #1a1a1a;
            }
            .header {
              text-align: center;
              border-bottom: 3px solid #1a1a1a;
              padding-bottom: 20px;
              margin-bottom: 30px;
            }
            .header h1 {
              margin: 0;
              font-size: 28px;
              font-weight: 700;
              color: #1a1a1a;
            }
            .header h2 {
              margin: 5px 0 0 0;
              font-size: 18px;
              font-weight: 500;
              color: #666;
            }
            .po-info {
              background: #f8f9fa;
              padding: 15px;
              border-radius: 8px;
              margin-bottom: 20px;
            }
            .po-info p {
              margin: 5px 0;
              font-size: 14px;
            }
            .section {
              margin-bottom: 25px;
            }
            .section p {
              margin: 8px 0;
              font-size: 14px;
            }
            .label {
              font-weight: 600;
              color: #1a1a1a;
            }
            .total {
              font-size: 20px;
              font-weight: 700;
              text-align: center;
              background: #1a1a1a;
              color: white;
              padding: 15px;
              border-radius: 8px;
              margin: 25px 0;
            }
            .instructions {
              background: #f8f9fa;
              padding: 20px;
              border-radius: 8px;
              margin: 25px 0;
            }
            .instructions h3 {
              margin: 0 0 15px 0;
              color: #1a1a1a;
            }
            .instructions p {
              margin: 8px 0;
              font-size: 14px;
            }
            .footer {
              text-align: center;
              margin-top: 30px;
              padding-top: 20px;
              border-top: 1px solid #ddd;
              color: #666;
              font-size: 12px;
            }
            @media print {
              body { margin: 0; }
              .header { border-bottom-color: #000; }
              .total { background: #000 !important; color: #fff !important; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>ðŸ“‹ PURCHASE ORDER</h1>
            <h2>Solv Solutions Hardware Store</h2>
          </div>

          <div class="po-info">
            <p><span class="label">PO Number:</span> PO-${Date.now().toString().slice(-6)}</p>
            <p><span class="label">Date:</span> ${new Date().toLocaleDateString()}</p>
            <p><span class="label">Time:</span> ${new Date().toLocaleTimeString()}</p>
          </div>

          <div class="section">
            <p><span class="label">Material:</span> ${material.name}</p>
            <p><span class="label">Type:</span> ${material.type}</p>
            <p><span class="label">Current Stock:</span> ${measurementUtils.formatMeasurement(material.currentStock, material.measurementUnit)}</p>
            <p><span class="label">Reorder Threshold:</span> ${measurementUtils.formatMeasurement(material.reorderThreshold, material.measurementUnit)}</p>
            <p><span class="label">Supplier:</span> ${material.supplier}</p>
            <p><span class="label">Unit Cost:</span> ${formatCurrency(material.unitCost)}/${material.measurementUnit === 'imperial' ? 'ft' : 'm'}</p>
          </div>

          <div class="total">
            REORDER REQUIRED
          </div>

          <div class="instructions">
            <h3>ðŸ“‹ ORDER INSTRUCTIONS</h3>
            <p>â€¢ Material: ${material.name}</p>
            <p>â€¢ Type: ${material.type}</p>
            <p>â€¢ Current stock is below reorder threshold</p>
            <p>â€¢ Please restock to maintain adequate inventory</p>
            <p>â€¢ Contact: Solv Solutions â€¢ 781-363-6080</p>
          </div>

          <div class="footer">
            <p>Thank you for your service!</p>
            <p>Generated by Cut & Order Manager</p>
            <p>Solv Solutions â€¢ 781-363-6080</p>
          </div>
        </body>
      </html>
    `;

    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(poContent);
      printWindow.document.close();
      printWindow.print();
    }
  };

  const sendPurchaseOrder = () => {
    alert('Purchase order sent to supplier! This would integrate with your email system in production.');
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-solv p-6 w-full max-w-md">
        <div className="flex items-center justify-between mb-4">
          <h2 className="solv-h2 text-solv-black">Purchase Order</h2>
          <button
            onClick={onClose}
            className="text-solv-black/50 hover:text-solv-black"
          >
            <X className="h-5 w-5" />
          </button>
        </div>
        
        <div className="space-y-4 mb-6">
          <div className="flex items-center gap-3 p-3 bg-solv-gray-50 rounded-solv">
            <Package className="h-8 w-8 text-solv-black" />
            <div>
              <h3 className="solv-h3 text-solv-black">{material.name}</h3>
              <p className="solv-body text-solv-black/70 capitalize">{material.type}</p>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <p className="text-solv-black/50">Current Stock</p>
              <p className="font-semibold text-solv-black">
                {(() => {
                  if (material.measurementUnit === 'imperial') {
                    const { feet, inches } = measurementUtils.inchesToFeetInches(material.currentStock * 12);
                    if (feet === 0) return `${inches}"`;
                    if (inches === 0) return `${feet}'`;
                    return `${feet}' ${inches}"`;
                  } else {
                    const { meters, cm } = measurementUtils.cmToMetersCm(material.currentStock * 100);
                    if (cm === 0) return `${meters}m`;
                    return `${meters}m ${cm}cm`;
                  }
                })()}
              </p>
            </div>
            <div>
              <p className="text-solv-black/50">Threshold</p>
              <p className="font-semibold text-solv-black">
                {(() => {
                  if (material.measurementUnit === 'imperial') {
                    const { feet, inches } = measurementUtils.inchesToFeetInches(material.reorderThreshold * 12);
                    if (feet === 0) return `${inches}"`;
                    if (inches === 0) return `${feet}'`;
                    return `${feet}' ${inches}"`;
                  } else {
                    const { meters, cm } = measurementUtils.cmToMetersCm(material.reorderThreshold * 100);
                    if (cm === 0) return `${meters}m`;
                    return `${meters}m ${cm}cm`;
                  }
                })()}
              </p>
            </div>
            <div>
              <p className="text-solv-black/50">Unit Cost</p>
              <p className="font-semibold text-solv-black">
                ${material.unitCost.toFixed(2)}/{material.measurementUnit === 'imperial' ? 'ft' : 'm'}
              </p>
            </div>
            <div>
              <p className="text-solv-black/50">Supplier</p>
              <p className="font-semibold text-solv-black">{material.supplier}</p>
            </div>
          </div>
        </div>
        
        <div className="flex gap-3">
          <button
            onClick={generatePurchaseOrder}
            className="solv-button-primary flex-1 flex items-center justify-center gap-2"
          >
            <Printer className="h-4 w-4" />
            Print PO
          </button>
          <button
            onClick={sendPurchaseOrder}
            className="solv-button-secondary flex-1 flex items-center justify-center gap-2"
          >
            <Send className="h-4 w-4" />
            Send PO
          </button>
        </div>
      </div>
    </div>
  );
}